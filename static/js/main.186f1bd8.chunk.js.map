{"version":3,"sources":["pages/employeeItem.tsx","pages/employeesInfo.tsx","pages/employeesList.tsx","pages/personsInfo.tsx","pages/employeeBirthdayList.tsx","helpers/helpers.ts","pages/employees.tsx","App.tsx","index.tsx"],"names":["EmployeeItem","data","changeListBirthday","className","onChange","e","id","target","value","formChanged","active","firstName","lastName","type","name","defaultChecked","htmlFor","EmployeeInfo","length","map","item","EmployeesList","group","info","PersonsInfo","formattedDate","EmployeesBirthdayList","ALPHABET","MONTHS","groupByAlphabet","rawData","arr","el","push","ind","findIndex","i","sort","sortByFirstName","groupByMonths","monthNumber","Date","getMonth","date","dob","month","getDate","getFullYear","index","sortByLastName","a","b","Employees","useState","employees","setEmployees","isLoading","setIsLoading","isError","setIsError","groupedEmployees","setGrouppedEmployees","birthdayList","setBirthdayList","setLength","list","setList","useEffect","fetch","response","json","results","getEmployees","param","indexOf","l","addToBDList","splice","deleteFromBDList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEaA,EAAoB,SAAC,GAAiF,IAAhFC,EAA+E,EAA/EA,KAAMC,EAAyE,EAAzEA,mBAMrC,OACI,qBAAKC,UAAU,4BAAf,SACI,uBAAMC,SAAU,SAACC,GAAD,OANxB,SAAqBA,EAAQC,GACN,SAAnBD,EAAEE,OAAOC,MAAmBN,EAAmBI,EAAI,OAASJ,EAAmBI,EAAI,UAKxDG,CAAYJ,EAAGJ,EAAKK,KAA3C,UACI,qBACIH,UAAWF,EAAKS,OAAS,oCAAsC,sCADnE,SAC2GT,EAAKU,UAAY,IAAMV,EAAKW,WACvI,gCACI,gCACI,uBAAOC,KAAK,QAAQP,GAAIL,EAAKK,GAAK,KAAMQ,KAAM,GAAKb,EAAKK,GAAIE,MAAM,QAC3DO,gBAAc,IAErB,uBAAOC,QAASf,EAAKK,GAAK,KAA1B,2BAGJ,gCACI,uBAAOO,KAAK,QAAQP,GAAIL,EAAKK,GAAK,IAAKQ,KAAM,GAAKb,EAAKK,GAAIE,MAAM,SAEjE,uBAAOQ,QAASf,EAAKK,GAAK,IAA1B,gCCrBXW,EAAoB,SAAC,GAAwF,IAAvFhB,EAAsF,EAAtFA,KAAMC,EAAgF,EAAhFA,mBACrC,OAAoB,IAAhBD,EAAKiB,OAED,qBAAKf,UAAU,8BAAf,0BAIJ,qBAAKA,UAAU,uBAAf,SACKF,EAAKkB,KAAI,SAACC,GAAD,OACN,cAAC,EAAD,CAAkCnB,KAAMmB,EAAMlB,mBAAoBA,GAA/CkB,EAAKd,GAAK,WCThCe,EAAqB,SAAC,GAA+F,IAA9FpB,EAA6F,EAA7FA,KAAMC,EAAuF,EAAvFA,mBACtC,OACI,qBAAKC,UAAU,iBAAf,SACKF,EAAKkB,KAAI,SAACC,GAAD,OACN,sBAAKjB,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BAAf,SAA2CiB,EAAKE,QAChD,cAAC,EAAD,CAAcrB,KAAMmB,EAAKG,KAAMrB,mBAAoBA,MAFVkB,EAAKE,aCLrDE,EAAmB,SAAC,GAAsC,IAArCvB,EAAoC,EAApCA,KAC9B,OAAoB,IAAhBA,EAAKiB,OAED,qBAAKf,UAAU,SAAf,0BAIJ,6BACKF,EAAKkB,KAAI,SAACC,GAAD,OACN,6BAA0BA,EAAKT,UAAY,IAAMS,EAAKR,SAAW,MAAQQ,EAAKK,eAArEL,EAAKd,GAAK,YCPtBoB,EAA6B,SAAC,GAAqE,IAApEzB,EAAmE,EAAnEA,KACxC,OAAe,IAD4F,EAA7DiB,OAGtC,qBAAKf,UAAU,SAAf,qCAIA,qBAAKA,UAAU,iCAAf,SACKF,EAAKkB,KAAI,SAACC,GAAD,OACN,sBAAKjB,UAAU,+BAAf,UACI,qBAAKA,UAAU,mCAAf,SAAmDiB,EAAKE,QACxD,cAAC,EAAD,CAAarB,KAAMmB,EAAKG,SAFuBH,EAAKE,MAAQ,YCXvEK,EAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzIC,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE9H,SAASC,EAAgBC,GAC5B,IAAIC,EAAwB,GAa5B,OAZAJ,EAASR,KAAI,SAACa,GAAD,OAAQD,EAAIE,KAAK,CAACX,MAAOU,EAAIT,KAAM,QAChDO,EAAQX,KAAI,SAACa,GACT,IAAIE,EAAMH,EAAII,WAAU,SAAAC,GAAC,OAAIA,EAAEd,QAAUU,EAAGrB,UAAU,MAEtD,OADAoB,EAAIG,GAAKX,KAAKU,KAAKD,GACZD,KAEXA,EAAIZ,KAAI,SAACa,GAEL,OADAA,EAAGT,KAAKc,KAAKC,GACNN,KAIJD,EAGJ,SAASQ,EAAcT,GAI1B,IAHA,IAAIC,EAAwB,GAExBS,GAAsB,IAAIC,MAAOC,WAC5BN,EAAI,EAAGA,EAAIR,EAAOV,OAAQkB,IAC3BA,EAAII,EAAcZ,EAAOV,OACzBa,EAAIE,KAAK,CAACX,MAAOM,EAAOQ,EAAII,GAAcjB,KAAM,KAEhDQ,EAAIE,KAAK,CAACX,MAAOM,EAAOQ,EAAII,EAAcZ,EAAOV,QAASK,KAAM,KAaxE,OAVIO,GACAA,EAAQX,KAAI,SAACa,GACTA,EAAGW,KAAO,IAAIF,KAAKT,EAAGY,KACtB,IAAIC,EAAgBjB,EAAOI,EAAGW,KAAKD,YACnCV,EAAGP,cAAgBO,EAAGW,KAAKG,UAAY,IAAMD,EAAQ,KAAOb,EAAGW,KAAKI,cACpE,IAAIC,EAAQjB,EAAII,WAAU,SAAAC,GAAC,OAAIA,EAAEd,QAAUuB,KAE3C,OADAd,EAAIiB,GAAOzB,KAAKU,KAAKD,GACdD,KAGRA,EA2BX,SAASkB,EAAeC,EAAYC,GAChC,OAAID,EAAEtC,SAAWuC,EAAEvC,SACR,GACI,EAGnB,SAAS0B,EAAgBY,EAAYC,GACjC,OAAID,EAAEvC,UAAYwC,EAAExC,UACT,GACI,ECzEZ,IAAMyC,EAAY,WAAO,IAAD,EAC8BC,mBAAS,IADvC,mBACpBC,EADoB,KACTC,EADS,OAE4BF,oBAAS,GAFrC,mBAEpBG,EAFoB,KAETC,EAFS,OAGwBJ,oBAAS,GAHjC,mBAGpBK,EAHoB,KAGXC,EAHW,OAIoDN,mBAAS,IAJ7D,mBAIpBO,EAJoB,KAIFC,EAJE,OAK2CR,mBAAS,IALpD,mBAKpBS,EALoB,KAKNC,EALM,OAMqBV,mBAAS,GAN9B,mBAMpBnC,EANoB,KAMZ8C,EANY,OAOmBX,mBAAS,IAP5B,mBAOpBY,EAPoB,KAOdC,EAPc,KAS3BC,qBAAU,YACY,uCAAG,8BAAAjB,EAAA,6DACjBO,GAAa,GADI,kBAGeW,MAAM,kEAHrB,cAGPC,EAHO,gBAISA,EAASC,OAJlB,OAIPC,EAJO,OAKbhB,EAAagB,GACbZ,GAAW,GACXE,EAAqBhC,EAAgB0C,IACrCR,EAAgBxB,EAAc,KARjB,kDAUboB,GAAW,GAVE,yBAYbF,GAAa,GAZA,6EAAH,qDAelBe,KACD,IAyBH,OAAIhB,EACO,qBAAKrD,UAAU,MAAf,qBAEPuD,EACO,qBAAKvD,UAAU,MAAf,mBAGH,sBAAKA,UAAU,MAAf,UACJ,gCACI,2CACA,cAAC,EAAD,CAAeF,KAAM2D,EAAkB1D,mBAjCpB,SAACI,EAAYmE,GACpC,GAAc,QAAVA,GACA,IAA0B,IAAtBR,EAAKS,QAAQpE,GAAY,CACzB,IAAI4B,EAAcoB,EAAUnB,WAAU,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChDqE,EDQb,SAAqB5C,EAAuBC,GAC/CA,EAAGW,KAAO,IAAIF,KAAKT,EAAGY,KACtB,IAAIC,EAAgBjB,EAAOI,EAAGW,KAAKD,YAC/BM,EAAQjB,EAAII,WAAU,SAAAC,GAAC,OAAIA,EAAEd,QAAUuB,KAK3C,OAJAd,EAAIiB,GAAOzB,KAAKU,KAAKD,GACrBA,EAAGP,cAAgBO,EAAGW,KAAKG,UAAY,IAAMlB,EAAOI,EAAGW,KAAKD,YAAc,KAAOV,EAAGW,KAAKI,cACzFf,EAAGtB,QAAS,EACZqB,EAAIiB,GAAOzB,KAAKc,KAAKY,GACdlB,EChB+B6C,CAAYd,EAAcR,EAAUpB,IAC9D6B,EAAgBY,GAChBV,EAAKhC,KAAK3B,GACV4D,EAAQD,GACRD,EAAUC,EAAK/C,aAEhB,CACH,IAAI8B,EAAQiB,EAAKS,QAAQpE,GACzB,IAAe,IAAX0C,EAAc,CACd,IAAId,EAAcoB,EAAUnB,WAAU,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChDqE,EDSb,SAA0B5C,EAAuBC,GACpDA,EAAGW,KAAO,IAAIF,KAAKT,EAAGY,KACtB,IAAIC,EAAgBjB,EAAOI,EAAGW,KAAKD,YAC/BM,EAAQjB,EAAII,WAAU,SAAAC,GAAC,OAAIA,EAAEd,QAAUuB,KAC3Cb,EAAGtB,QAAS,EACZ,IAAI0B,EAAIL,EAAIiB,GAAOzB,KAAKmD,QAAQ1C,GAKhC,OAJW,IAAPI,GACAL,EAAIiB,GAAOzB,KAAKsD,OAAOzC,EAAG,GAE9BJ,EAAGP,cAAgBO,EAAGW,KAAKG,UAAY,IAAMlB,EAAOI,EAAGW,KAAKD,YAAc,KAAOV,EAAGW,KAAKI,cAClFhB,ECnB+B+C,CAAiBhB,EAAcR,EAAUpB,IACnE6B,EAAgBY,GAChBV,EAAKY,OAAO7B,EAAO,GACnBkB,EAAQD,GACRD,EAAUC,EAAK/C,gBAiBvB,gCACI,oDACA,cAAC,EAAD,CAAuBjB,KAAM6D,EAAc5C,OAAQA,WC5DhD6D,MARf,WACE,OACI,8BACE,cAAC,EAAD,O,MCARC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.186f1bd8.chunk.js","sourcesContent":["import {IPerson} from \"../helpers/interfaces\";\n\nexport const EmployeeItem: any = ({data, changeListBirthday}: { data: IPerson, changeListBirthday: Function }) => {\n\n    function formChanged(e: any, id: number) {\n        e.target.value === 'true' ? changeListBirthday(id, 'add') : changeListBirthday(id, 'delete');\n    }\n\n    return (\n        <div className='empl_container-personInfo'>\n            <form onChange={(e) => formChanged(e, data.id)}>\n                <div\n                    className={data.active ? 'empl_container-personName checked' : 'empl_container-personName unchecked'}>{data.firstName + ' ' + data.lastName}</div>\n                <div>\n                    <div>\n                        <input type=\"radio\" id={data.id + 'na'} name={'' + data.id} value=\"false\"\n                               defaultChecked\n                        />\n                        <label htmlFor={data.id + 'na'}>not active</label>\n                    </div>\n\n                    <div>\n                        <input type=\"radio\" id={data.id + 'a'} name={'' + data.id} value=\"true\"\n                        />\n                        <label htmlFor={data.id + 'a'}>active</label>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n}","import {IPerson} from \"../helpers/interfaces\";\nimport {EmployeeItem} from \"./employeeItem\";\n\nexport const EmployeeInfo: any = ({data, changeListBirthday}: { data: Array<IPerson>, changeListBirthday: Function }) => {\n    if (data.length === 0) {\n        return (\n            <div className=\"empl_container-group italic\">No Employees</div>\n        )\n    }\n    return (\n        <div className=\"empl_container-group\">\n            {data.map((item) => (\n                <EmployeeItem key={item.id + 'q'} data={item} changeListBirthday={changeListBirthday}/>\n            ))}\n        </div>\n    );\n}","import {IGroupedPerson} from \"../helpers/interfaces\";\nimport {EmployeeInfo} from \"./employeesInfo\";\n\nexport const EmployeesList: any = ({data, changeListBirthday}: { data: Array<IGroupedPerson>, changeListBirthday: Function }) => {\n    return (\n        <div className='empl_container'>\n            {data.map((item) => (\n                <div className='empl_container-wrapper' key={item.group}>\n                    <div className='empl_container-groupName'>{item.group}</div>\n                    <EmployeeInfo data={item.info} changeListBirthday={changeListBirthday}/>\n                </div>\n            ))}\n        </div>\n    );\n};","import {IPerson} from \"../helpers/interfaces\";\n\nexport const PersonsInfo: any = ({data}: { data: Array<IPerson> }) => {\n    if (data.length === 0) {\n        return (\n            <div className='italic'>No Employees</div>\n        )\n    }\n    return (\n        <ul>\n            {data.map((item) => (\n                <li key={item.id + 'bd'}>{item.firstName + ' ' + item.lastName + ' - ' + item.formattedDate}</li>\n            ))}\n        </ul>\n    );\n}","import {IGroupedPerson} from \"../helpers/interfaces\";\nimport {PersonsInfo} from \"./personsInfo\";\n\n\nexport const EmployeesBirthdayList: any = ({data, length}: { data: Array<IGroupedPerson>, length: number }) => {\n    if (length === 0) {\n        return (\n            <div className='italic'>Employees List is empty</div>\n        )\n    }\n        return (\n            <div className='emplBirthday_container-wrapper'>\n                {data.map((item) => (\n                    <div className='emplBirthday_container-group' key={item.group + 'bd'}>\n                        <div className='emplBirthday_container-groupName'>{item.group}</div>\n                        <PersonsInfo data={item.info}/>\n                    </div>\n\n                ))}\n            </div>\n        );\n};","import {IGroupedPerson, IPerson} from \"./interfaces\";\n\nexport const ALPHABET = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\nexport const MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport function groupByAlphabet(rawData: IPerson[]): IGroupedPerson[] {\n    let arr: IGroupedPerson[] = [];\n    ALPHABET.map((el) => arr.push({group: el, info: []}))\n    rawData.map((el) => {\n        let ind = arr.findIndex(i => i.group === el.firstName[0]);\n        arr[ind].info.push(el);\n        return arr;\n    });\n    arr.map((el) => {\n        el.info.sort(sortByFirstName);\n        return el;\n\n        el.info.forEach((el) => {el.active = false});\n    });\n    return arr;\n}\n\nexport function groupByMonths(rawData: IPerson[]): IGroupedPerson[] {\n    let arr: IGroupedPerson[] = [];\n\n    let monthNumber: number = new Date().getMonth();\n    for (let i = 0; i < MONTHS.length; i++) {\n        if (i + monthNumber < MONTHS.length) {\n            arr.push({group: MONTHS[i + monthNumber], info: []});\n        } else {\n            arr.push({group: MONTHS[i + monthNumber - MONTHS.length], info: []});\n        }\n    }\n    if (rawData) {\n        rawData.map((el) => {\n            el.date = new Date(el.dob);\n            let month: string = MONTHS[el.date.getMonth()];\n            el.formattedDate = el.date.getDate() + ' ' + month + ', ' + el.date.getFullYear();\n            let index = arr.findIndex(i => i.group === month);\n            arr[index].info.push(el);\n            return arr;\n        });\n    }\n    return arr;\n}\n\nexport function addToBDList(arr: IGroupedPerson[], el: IPerson): IGroupedPerson[] {\n    el.date = new Date(el.dob);\n    let month: string = MONTHS[el.date.getMonth()];\n    let index = arr.findIndex(i => i.group === month);\n    arr[index].info.push(el);\n    el.formattedDate = el.date.getDate() + ' ' + MONTHS[el.date.getMonth()] + ', ' + el.date.getFullYear();\n    el.active = true;\n    arr[index].info.sort(sortByLastName);\n    return arr;\n}\n\nexport function deleteFromBDList(arr: IGroupedPerson[], el: IPerson): IGroupedPerson[] {\n    el.date = new Date(el.dob);\n    let month: string = MONTHS[el.date.getMonth()];\n    let index = arr.findIndex(i => i.group === month);\n    el.active = false;\n    let i = arr[index].info.indexOf(el);\n    if (i !== -1) {\n        arr[index].info.splice(i, 1);\n    }\n    el.formattedDate = el.date.getDate() + ' ' + MONTHS[el.date.getMonth()] + ', ' + el.date.getFullYear();\n    return arr;\n}\n\nfunction sortByLastName(a: IPerson, b: IPerson): number {\n    if (a.lastName > b.lastName) {\n        return 1\n    } else return -1;\n}\n\nfunction sortByFirstName(a: IPerson, b: IPerson): number {\n    if (a.firstName > b.firstName) {\n        return 1\n    } else return -1;\n}","import React, {useState, useEffect} from \"react\";\nimport {IGroupedPerson, IPerson} from \"../helpers/interfaces\";\nimport {EmployeesList} from \"./employeesList\";\nimport {EmployeesBirthdayList} from \"./employeeBirthdayList\";\nimport {addToBDList, groupByAlphabet, groupByMonths, deleteFromBDList} from \"../helpers/helpers\";\n\nexport const Employees = () => {\n    const [employees, setEmployees]: [IPerson[], Function] = useState([]);\n    const [isLoading, setIsLoading]: [boolean, Function] = useState(true);\n    const [isError, setIsError]: [boolean, Function] = useState(false);\n    const [groupedEmployees, setGrouppedEmployees]: [IGroupedPerson[], Function] = useState([]);\n    const [birthdayList, setBirthdayList]: [IGroupedPerson[], Function] = useState([]);\n    const [length, setLength]: [number, Function] = useState(0);\n    const [list, setList]: [number[], Function] = useState([]);\n\n    useEffect(() => {\n        const getEmployees = async () => {\n            setIsLoading(true);\n            try {\n                const response: any = await fetch(\"https://yalantis-react-school-api.yalantis.com/api/task0/users\");\n                const results = await response.json();\n                setEmployees(results);\n                setIsError(false);\n                setGrouppedEmployees(groupByAlphabet(results));\n                setBirthdayList(groupByMonths([]));\n            } catch (e) {\n                setIsError(true);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        getEmployees();\n    }, []);\n\n    const changeListBirthday = (id: number, param: string) => {\n        if (param === 'add') {\n            if (list.indexOf(id) === -1) {\n                let ind: number = employees.findIndex(i => i.id === id);\n                let l: IGroupedPerson[] = addToBDList(birthdayList, employees[ind])\n                setBirthdayList(l);\n                list.push(id);\n                setList(list);\n                setLength(list.length);\n            }\n        } else {\n            let index = list.indexOf(id);\n            if (index !== -1) {\n                let ind: number = employees.findIndex(i => i.id === id);\n                let l: IGroupedPerson[] = deleteFromBDList(birthdayList, employees[ind]);\n                setBirthdayList(l);\n                list.splice(index, 1);\n                setList(list);\n                setLength(list.length);\n            }\n        }\n    };\n\n    if (isLoading) {\n        return <div className=\"App\">Loading</div>\n    }\n    if (isError) {\n        return <div className=\"App\">Error</div>\n    }\n\n    return (<div className=\"App\">\n        <div>\n            <h1>Employees</h1>\n            <EmployeesList data={groupedEmployees} changeListBirthday={changeListBirthday}/>\n        </div>\n        <div>\n            <h1>Employees birthday</h1>\n            <EmployeesBirthdayList data={birthdayList} length={length}/>\n        </div>\n    </div>)\n};","import React from 'react';\nimport {Employees} from './pages/employees'\n\nfunction App() {\n  return (\n      <div>\n        <Employees/>\n      </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}